"""
Example inferring multiple exponential decay models arranged into a
4D voxelwise image using a surface model
"""
import argparse
import sys

import numpy as np
import nibabel as nib

import vaby 

cli = argparse.ArgumentParser()
cli.add_argument("--method", help="Inference method", choices=["avb", "svb"], default="avb")
cli.add_argument("--amp", help="Ground truth amplitude", type=float, default=42.0)
cli.add_argument("--rate", help="Ground truth decay rate", type=float, default=0.5)
cli.add_argument("--dt", help="Time resolution", type=float, default=0.1)
cli.add_argument("--nt", help="Number of time points", type=int, default=100)
cli.add_argument("--surface", help="Gifti file containing surface geometry data")
cli.add_argument("--noise", help="Ground truth noise amplitude (std dev)", type=float, default=5)
cli.add_argument("--rseed", help="Random number seed to give reproducible results", type=int)
cli.add_argument("--debug", help="Debug logging", action="store_true", default=False)
#cli.add_argument("--plot", help="Show output graphically", action="store_true", default=False)
opts = cli.parse_args()

if opts.rseed:
    np.random.seed(opts.rseed)

# Ground truth parameters
PARAMS_TRUTH = [opts.amp, opts.rate]
NOISE_STD_TRUTH = opts.noise
NOISE_VAR_TRUTH = NOISE_STD_TRUTH**2
NOISE_PREC_TRUTH = 1/NOISE_VAR_TRUTH
print("Ground truth: a=%f, r=%f, noise=%f (std.dev.)" % (PARAMS_TRUTH[0], PARAMS_TRUTH[1], NOISE_STD_TRUTH))

# Observed data samples are generated by Numpy from the ground truth
# Gaussian distribution. Reducing the number of samples should make
# the inference less 'confident' - i.e. the output variances for
# MU and BETA will increase

gii = nib.load(opts.surface)
nvertices = gii.darrays[0].data.shape[0]
print(f"Number of vertices on surface: {nvertices}")

t = np.array([float(t)*opts.dt for t in range(opts.nt)])
params_voxelwise = np.tile(np.array(PARAMS_TRUTH)[..., np.newaxis, np.newaxis], (1, nvertices, 1))
temp_model = vaby.get_model_class("exp")(None, dt=opts.dt)
DATA_CLEAN = temp_model.evaluate(params_voxelwise, t).numpy()
DATA_NOISY = DATA_CLEAN + np.random.normal(0, NOISE_STD_TRUTH, DATA_CLEAN.shape)

options = {
    "method" : opts.method,
    "surface" : opts.surface,
    "dt" : opts.dt,
    "param_overrides" : {
        "amp1" : {
            "prior_type" : "M",
        }
    },
    "save_mean" : True,
    "debug" : opts.debug,
    "save_log" : True,
    "output" : "surface_example_out",
    "log_stream" : sys.stdout,
}

if opts.method == "svb":
    options.update({
        "epochs" : 200,
        "learning_rate" : 0.1,
        "sample_size" : 5, 
    })
elif opts.method == "avb":
    options.update({
        "max_iterations" : 20,
    })

runtime, state = vaby.run("surface_example_out/data_exp_noisy.gii", "exp", **options)

giidata = DATA_NOISY.reshape([nvertices, opts.nt,])
arr = nib.gifti.GiftiDataArray(giidata.astype(np.float32))
gii = nib.GiftiImage(darrays=[arr])
gii.to_filename("surface_example_out/data_exp_noisy.gii")

giidata = DATA_CLEAN.reshape([nvertices, opts.nt,])
arr = nib.gifti.GiftiDataArray(giidata.astype(np.float32))
gii = nib.GiftiImage(darrays=[arr])
gii.to_filename("surface_example_out/data_exp_clean.gii")
